generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../../docs/db"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../../../assets"
  outputName          = "voyager.dbml"
  projectName         = "Voyager"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Better In/Out-Processing"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UnitKind {
  INSTALLATION
  COMMAND
  DELTA
  SQUADRON
}

model Unit {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  abbrev   String?  @db.VarChar(50)
  kind     UnitKind
  function String?  @db.Text
  location String?  @db.Text

  /// Define possible relationship with parent Unit
  /// Rename collumn to conform to SQL naming conventions
  parentID Int?  @map("parent_id")
  parent   Unit? @relation("ParentUnit", fields: [parentID], references: [id])

  /// Define possible relationship with grandparent Unit
  /// Rename collumn to conform to SQL naming conventions
  grandParentID Int?  @map("grand_parent_id")
  grandParent   Unit? @relation("GrandParentUnit", fields: [grandParentID], references: [id])

  /// Define possible relationship with installation Unit
  /// Rename collumn to conform to SQL naming conventions
  installationID Int?  @map("installation_id")
  installation   Unit? @relation("InstallationUnit", fields: [installationID], references: [id])

  children             Unit[]   @relation("ParentUnit")
  grandChildren        Unit[]   @relation("GrandParentUnit")
  installationChildren Unit[]   @relation("InstallationUnit")
  Role                 Role[]   @relation("Admin Of Unit")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  /// Rename table to units to conform to
  /// SQL naming conventions
  @@map("units")
}

enum ProcessingStatus {
  IN_PROCESSING
  IN_PROCESSING_WITH_ORDERS
  IN_TRANSIT
  OUT_PROCESSING
  STATIONARY
}

enum RoleKind {
  USER
  SITE_ADMIN
  COMMAND_ADMIN
  INSTALLATION_ADMIN
  DELTA_ADMIN
  SQUADRON_ADMIN
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Role {
  id        Int      @id @default(autoincrement())
  kind      RoleKind
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// Define possible relationship with installation Unit
  /// Rename collumn to conform to SQL naming conventions
  unitID Int?  @map("unit_id")
  unit   Unit? @relation("Admin Of Unit", fields: [unitID], references: [id])

  /// Rename table to units to conform to
  /// SQL naming conventions
  @@map("roles")
}
