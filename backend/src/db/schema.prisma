generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../../docs/db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Installation {
  id       Int    @id @default(autoincrement())
  name     String @unique
  location String @db.VarChar(100)

  /// Define relationship with Squadrons
  Squadron Squadron[]
  /// Define relationship with Units
  Unit     Unit[]

  /// Rename table to installations to conform to
  /// SQL naming conventions
  @@map("installations")
}

model Command {
  id       Int    @id @default(autoincrement())
  name     String @unique
  abbrev   String @unique @db.VarChar(50)
  function String

  /// Define relationship with Deltas
  Delta Delta[]
  /// Define relationship with Units
  Unit  Unit[]

  /// Rename table to commands to conform to
  /// SQL naming conventions
  @@map("commands")
}

model Delta {
  id       Int    @id @default(autoincrement())
  name     String @unique
  abbrev   String @unique @db.VarChar(50)
  function String

  /// Define relationship with Commands
  Command   Command? @relation(fields: [commandId], references: [id])
  /// Rename key to command_id (seems to be convention for naming foreign keys)
  commandId Int?     @map("command_id")

  /// Define relationship with Squadrons
  Squadron Squadron[]
  /// Define relationship with Units
  Unit     Unit[]

  /// Rename table to deltas to conform to
  /// SQL naming conventions
  @@map("deltas")
}

model Squadron {
  id       Int    @id @default(autoincrement())
  name     String @unique
  abbrev   String @unique @db.VarChar(50)
  function String

  /// Define relationship with Deltas
  Delta   Delta? @relation(fields: [deltaId], references: [id])
  /// Rename key to delta_id (seems to be convention for naming foreign keys)
  deltaId Int?   @map("delta_id")

  /// Define relationship with Installations
  Installation   Installation? @relation(fields: [installationId], references: [id])
  /// Rename key to installation_id (seems to be convention for naming foreign keys)
  installationId Int?          @map("installation_id")

  /// Define relationship with Units
  Unit Unit[]
  /// Rename table to squadrons to conform to
  /// SQL naming conventions
  @@map("squadrons")
}

model Unit {
  id Int @id @default(autoincrement())

  /// Define relationship with Installations
  Installation   Installation? @relation(fields: [installationId], references: [id])
  /// Rename key to installation_id (seems to be convention for naming foreign keys)
  installationId Int?          @map("installation_id")
  /// Define relationship with Commands
  Command        Command?      @relation(fields: [commandId], references: [id])
  /// Rename key to command_id (seems to be convention for naming foreign keys)
  commandId      Int?          @map("command_id")
  /// Define relationship with Deltas
  Delta          Delta?        @relation(fields: [deltaId], references: [id])
  /// Rename key to delta_id (seems to be convention for naming foreign keys)
  deltaId        Int?          @map("delta_id")
  /// Define relationship with Squadrons
  Squadron       Squadron?     @relation(fields: [squadronId], references: [id])
  /// Rename key to command_id (seems to be convention for naming foreign keys)
  squadronId     Int?          @map("squadron_id")
}

enum ProcessingStatus {
  IN_PROCESSING
  IN_PROCESSING_WITH_ORDERS
  IN_TRANSIT
  OUT_PROCESSING
  STATIONARY
}

enum Role {
  USER
  SITE_ADMIN
  COMMAND_ADMIN
  INSTALLATION_ADMIN
  DELTA_ADMIN
  SQUADRON_ADMIN
}
