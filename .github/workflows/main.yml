name: CI/CD for Main branch

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 'jobs' is the list of all the workflows that will kick off.
jobs:
  check_files:
    runs-on: "ubuntu-20.04"
    outputs:
      backend: ${{ steps.changes.outputs.backend}}
      frontend: ${{ steps.changes.outputs.frontend}}
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - name: Check modified files
        # Give an id to the step, so we can reference it later
        id: changes
        run: |
          # Diff HEAD with the previous commit
          if (( $(git diff --name-only HEAD^ HEAD backend | grep ".js$\|json$" | wc -l) > 30)); then echo "::set-output name=backend::true"; fi
          if (( $(git diff --name-only HEAD^ HEAD frontend | grep ".js$\|json$" | wc -l) > 30)); then echo "::set-output name=frontend::true"; fi

  # This workflow kicks off the build and test for the Frontend
  frontend-build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.frontend == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Build Frontend
        run: |
          docker build -t capstone-ui ./frontend
      - name: Test Frontend
        run: |
          docker run -e CI=true capstone-ui npm run test

  # This workflow kicks off the build and test for the Backend
  backend-build-and-test:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.backend == 'true'
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - run: npm --prefix backend install
      - name: Build Backend
        run: |
          docker build \
          -t capstone-api \
          ./backend
      - name: Migrate Database
        working-directory: backend
        run: |
          pg_isready -d postgres -h 172.17.0.1 -p 5432 -U postgres
          node -v
          export DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres"
          export NODE_OPTIONS="--experimental-vm-modules --experimental-specifier-resolution=node"
          npm run db:testMigration
          npm run db:seed

      - name: Test Backend
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          docker run \
          -e CI=true \
          -e DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres" \
          -e FIREBASE_SERVICE_ACCOUNT="${FIREBASE_SERVICE_ACCOUNT}" \
          capstone-api npm run test

  # This workflow kicks off the linter for Frontend.
  frontend-linter:
    name: Lint Frontend Code Base
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.frontend == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Installs dependencies on the runner for Frontend
      - name: Install linter options
        run: npm --prefix ./frontend install
      # Executes the linter on the Frontend code base.
      - name: Run Linter
        run: npm --prefix ./frontend run lint

  # This workflow kicks off the linter for your Backend.
  backend-linter:
    name: Lint Backend Code Base
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.backend == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files
          fetch-depth: 0
      # Installs dependencies on the runner for Backend
      - name: Install linter options
        run: npm --prefix ./backend install
      # Executes the linter on the Backend code base.
      - name: Run Linter
        run: npm --prefix ./backend run lint

  # This workflow kicks off the build and test for the Backend
  end-to-end-test:
    name: Cypress End-to-End Test
    runs-on: ubuntu-latest
    needs: [check_files, backend-build-and-test, frontend-build-and-test]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - run: npm --prefix backend install
      - run: npm --prefix frontend install
      - name: Build Backend
        run: |
          docker build \
          -t capstone-api \
          ./backend
      - name: Migrate Database
        working-directory: backend
        run: |
          pg_isready -d postgres -h 172.17.0.1 -p 5432 -U postgres
          node -v
          export DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres"
          export NODE_OPTIONS="--experimental-vm-modules --experimental-specifier-resolution=node"
          npm run db:testMigration
          npm run db:seed

      - name: Cypress
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: npm --prefix backend start, npm --prefix frontend start
          wait-on: "http://localhost:3000, http://localhost:8081"
          wait-on-timeout: 120
          working-directory: frontend
