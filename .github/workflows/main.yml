name: CI/CD for Main branch

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 'jobs' is the list of all the workflows that will kick off.
jobs:
  check_files:
    runs-on: "ubuntu-20.04"
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    env:
      DATABASE_URL: "postgres://postgres:postgres@172.17.0.1:5432/postgres"
      FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}
      FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY }}
      FIREBASE_SERVICE_ACCOUNT_CLIENT_EMAIL: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CLIENT_EMAIL }}
      FIREBASE_SERVICE_ACCOUNT_CLIENT_ID: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CLIENT_ID }}
      FIREBASE_SERVICE_ACCOUNT_AUTH_URI: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AUTH_URI }}
      FIREBASE_SERVICE_ACCOUNT_TOKEN_URI: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_TOKEN_URI }}
      FIREBASE_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL }}
      FIREBASE_SERVICE_ACCOUNT_CLIENT_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CLIENT_PROVIDER_X509_CERT_URL }}
      TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
      TEST_PASSWORD: ${{ secrets.TEST_EMAIL }}
      VITE_REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
      VITE_REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
      VITE_REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
      VITE_REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
      VITE_REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
      NODE_OPTIONS: "--experimental-vm-modules --experimental-specifier-resolution=node"
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0
      - name: Check modified files
        # Give an id to the step, so we can reference it later
        id: changes
        run: |
          PR_BASE=$(jq --raw-output .pull_request.base.sha "${{ github.event_path }}")
          PR_HEAD=$(jq --raw-output .pull_request.head.sha "${{ github.event_path }}")
          PUSH_BASE=$(jq --raw-output .before "${{ github.event_path }}")
          PUSH_HEAD=$(jq --raw-output .after "${{ github.event_path }}")

          if [[ "${PR_BASE}" == "null" ]]; then BACKEND=$(git diff --name-only "${PUSH_BASE}^" $PUSH_HEAD backend | grep "js$\|json$" | wc -l); else BACKEND=$(git diff --name-only "${PR_BASE}^" $PR_HEAD backend | grep "js$\|json$" | wc -l); fi
          if [[ "${PR_BASE}" == "null" ]]; then FRONTEND=$(git diff --name-only "${PUSH_BASE}^" $PUSH_HEAD frontend | grep "js$\|json$\|jsx$" | wc -l); else FRONTEND=$(git diff --name-only "${PR_BASE}^" $PR_HEAD frontend | grep "js$\|json$\|jsx$" | wc -l); fi
          if [[ "${PR_BASE}" == "null" ]]; then BACKEND_FILES=$(git diff --name-only "${PUSH_BASE}^" $PUSH_HEAD backend ); else BACKEND_FILES=$(git diff --name-only "${PR_BASE}^" $PR_HEAD backend ); fi
          if [[ "${PR_BASE}" == "null" ]]; then FRONTEND_FILES=$(git diff --name-only "${PUSH_BASE}^" $PUSH_HEAD frontend ); else FRONTEND_FILES=$(git diff --name-only "${PR_BASE}^" $PR_HEAD frontend ); fi

          if (( $BACKEND > 0)); then echo -e "New bckend files: \n$(echo $BACKEND_FILE | sed 's/ /\n/g')"; fi
          if (( $FRONTEND > 0)); then echo -e "New frontend files: \n$(echo $FRONTEND_FILES | sed 's/ /\n/g')"; fi

          if (( $BACKEND > 0)); then echo "::set-output name=backend::true"; fi
          if (( $FRONTEND > 0)); then echo "::set-output name=frontend::true"; fi

  # This workflow kicks off the build and test for the Frontend
  frontend-build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    needs: [check_files]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.frontend == 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Build Frontend
        run: |
          docker build -t capstone-ui ./frontend
      - name: Test Frontend
        run: |
          docker run -e CI=true capstone-ui npm run test

  # This workflow kicks off the build and test for the Backend
  backend-build-and-test:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    needs: [check_files]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.backend == 'true' }}
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - run: npm --prefix backend install
      - name: Build Backend
        run: |
          docker build \
          -t capstone-api \
          ./backend
      - name: Migrate Database
        working-directory: backend
        run: |
          pg_isready -d postgres -h 172.17.0.1 -p 5432 -U postgres
          node -v
          export DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres"
          npm run db:testMigration
          npm run db:seed

      - name: Test Backend
        run: |
          docker run \
          -e CI=true \
          -e DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres" \
          -e FIREBASE_SERVICE_ACCOUNT="${FIREBASE_SERVICE_ACCOUNT}" \
          capstone-api npm run test

  # This workflow kicks off the linter for Frontend.
  frontend-linter:
    name: Lint Frontend Code Base
    runs-on: ubuntu-latest
    needs: [check_files]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.frontend == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Installs dependencies on the runner for Frontend
      - name: Install linter options
        run: npm --prefix ./frontend install
      # Executes the linter on the Frontend code base.
      - name: Run Linter
        run: npm --prefix ./frontend run lint

  # This workflow kicks off the linter for your Backend.
  backend-linter:
    name: Lint Backend Code Base
    runs-on: ubuntu-latest
    needs: [check_files]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.backend == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Installs dependencies on the runner for Backend
      - name: Install linter options
        run: npm --prefix ./backend install
      # Executes the linter on the Backend code base.
      - name: Run Linter
        run: npm --prefix ./backend run lint

  # This workflow kicks off the build and test for the Backend
  end-to-end-test:
    name: Cypress End-to-End Test
    runs-on: ubuntu-latest
    needs: [check_files, frontend-build-and-test, backend-build-and-test]
    if: github.event_name == 'push'
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Installs dependencies on the runner for Backend
      - run: npm --prefix backend install
      # Installs dependencies on the runner for Backend
      - run: npm --prefix frontend install
      - name: Build Backend
        run: |
          docker build \
          -t capstone-api \
          ./backend
      - name: Migrate Database
        working-directory: backend
        run: |
          pg_isready -d postgres -h 172.17.0.1 -p 5432 -U postgres
          node -v
          export DATABASE_URL="postgres://postgres:postgres@172.17.0.1:5432/postgres"
          export NODE_OPTIONS="--experimental-vm-modules --experimental-specifier-resolution=node"
          npm run db:testMigration
          npm run db:seed

      - name: Cypress
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: npm --prefix backend start, npm --prefix frontend start
          wait-on: "http://localhost:3000, http://localhost:8081"
          wait-on-timeout: 120
          working-directory: frontend

  # This workflow kicks off the deployment to Heroku
  backend-deploy-to-heroku:
    name: Deploy Backend to Heroku
    needs: [check_files, end-to-end-test]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.backend == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Deploy Backend
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "bsdi1-voyager-backend"
          heroku_email: "dkarrick2@gmail.com"
          appdir: "backend/"
          branch: main

  # This workflow kicks off the deployment to Heroku
  frontend-deploy-to-heroku:
    name: Deploy Frontend to Heroku
    needs: [check_files, end-to-end-test]
    if: ${{ github.event_name == 'push' || needs.check_files.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Use Node.js 17.x
        uses: actions/setup-node@v1
        with:
          node-version: 17.x

      - name: Build Frontend
        run: |
          npm --prefix frontend install
          npm --prefix frontend run build

      - name: CompressFiles
        uses: stefh/ghaction-CompressFiles@v2
        with:
          path: "frontend/dist"

      - name: Commit Build
        run: |
          git config --local user.email "actions@users.noreply.github.com"
          git config --local user.name "Automated Publisher"
          git add -f frontend/dist/*
          git commit -m "Chore: Build frontend for distribution"

      - name: Deploy Frontend
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "bsdi1-voyager-frontend"
          heroku_email: "dkarrick2@gmail.com"
          appdir: "frontend"
          buildpack: "https://github.com/heroku/heroku-buildpack-static.git"
          branch: main
